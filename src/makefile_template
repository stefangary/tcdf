#   Makefile for tcdf
# This software is distrubuted under the
# terms of the GNU GPL v3 or any later version.
#   Copyright Stefan Gary, 2018
#===================================
# Step 1:
# Set paths for where to install
# executables (BINDIR) and where
# to get the netCDF library.
#===================================
INCLUDE= .			# essentially a working directory
#---For use with Docker---
#NETCDFLIB = /usr/lib
#NETCDFINC = /usr/include
#BINDIR = /usr/bin
#---For use with regular Linux system---
#NETCDFLIB = /usr/local/lib
#NETCDFINC = /usr/local/include
#BINDIR = /usr/local/bin
#---These values are set by set_tcdf_prefix.sh---
NETCDFLIB = /usr/local/lib
NETCDFINC = /usr/local/include
BINDIR = /usr/local/bin
#---Set the model domain---
# (Need to change this to autodetect!)
DOMAIN=viking20_full
#DOMAIN=viking20_cut
#===================================
# Step 2:
# Define compiler and linker
#===================================
FC= gfortran    		# invoke FORTRAN compiler
# If you want lots of output, include the verbose preprocessor flag.
#FFLAGS=-xf95-cpp-input -D$(DOMAIN) -Dverbose -c -I$(INCLUDE) 		# compile, include
FFLAGS=-xf95-cpp-input -D$(DOMAIN) -c -I$(INCLUDE) 		# compile, include
LINK= gfortran			# linker
LDFLAGS=			# linker flags
LIBS=				# any additional libraries
#===================================
# Step 3:
# Define library and program names (unlikely to change!)
#===================================
#
PROG_SRC= tcdfhist.f90 ariane2tcdf.f90 tcdfsplit.f90 tcdfsort.f90 tcdfmerge.f90 tcdf_most_likely.f90 tcdf_flatten_hist.f90 tcdf_merge_hist.f90 tcdf_stub.f90 tcdf_get_bot.f90
PROG_OBJ= ${PROG_SRC:.f90=.o}
PROGRAMS= ${PROG_SRC:.f90=}
UTILS_SRC= tcdfio.f90 gridsio.f90 basicfun.f90 
UTILS_OBJ=${UTILS_SRC:.f90=.o}
#===================================
# Step 4:
# Set make actions to install, e.g.
# make tcdf
# make install
# make clean - NOTE MAKEFILE IS DELETED BECAUSE
#              set_tcdf_prefix.sh BASED ON MAKEFILE_TEMPLATE
#===================================
#
tcdf:		$(PROGRAMS)
#
install:	tcdf
		chmod 755 $(PROGRAMS)
		mv $(PROGRAMS) $(BINDIR)
#
clean:
		rm -f $(PROG_OBJ) $(UTILS_OBJ) $(PROGRAMS) *.mod makefile
#
#===================================
# Step 5:
# Program dependencies
#===================================
#
tcdfhist: gridsio.o tcdfio.o basicfun.o tcdfhist.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o tcdfhist.o -o tcdfhist $(LIBS) -L${NETCDFLIB} -lnetcdff
#
ariane2tcdf: gridsio.o tcdfio.o basicfun.o ariane2tcdf.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o ariane2tcdf.o -o ariane2tcdf $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdfsplit: gridsio.o tcdfio.o basicfun.o tcdfsplit.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o tcdfsplit.o -o tcdfsplit $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdfsort: gridsio.o tcdfio.o basicfun.o tcdfsort.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o tcdfsort.o -o tcdfsort $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdfmerge: gridsio.o tcdfio.o basicfun.o tcdfmerge.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o tcdfmerge.o -o tcdfmerge $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdf_most_likely: gridsio.o basicfun.o tcdf_most_likely.o
	$(LINK) $(LDFLAGS) gridsio.o basicfun.o tcdf_most_likely.o -o tcdf_most_likely $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdf_flatten_hist: gridsio.o basicfun.o tcdf_flatten_hist.o
	$(LINK) $(LDFLAGS) gridsio.o basicfun.o tcdf_flatten_hist.o -o tcdf_flatten_hist $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdf_merge_hist: basicfun.o gridsio.o tcdf_merge_hist.o
	$(LINK) $(LDFLAGS) basicfun.o gridsio.o tcdf_merge_hist.o -o tcdf_merge_hist $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdf_stub: basicfun.o gridsio.o tcdf_stub.o
	$(LINK) $(LDFLAGS) basicfun.o gridsio.o tcdf_stub.o -o tcdf_stub $(LIBS) -L${NETCDFLIB} -lnetcdff
#
tcdf_get_bot: gridsio.o tcdfio.o basicfun.o tcdf_get_bot.o
	$(LINK) $(LDFLAGS) gridsio.o tcdfio.o basicfun.o tcdf_get_bot.o -o tcdf_get_bot $(LIBS) -L${NETCDFLIB} -lnetcdff
#
#===================================
# Step 6:
# Object dependencies
#===================================
#
gridsio.o:	gridsio.f90
	$(FC) $(FFLAGS) gridsio.f90
#
tcdfio.o:	tcdfio.f90
	$(FC) $(FFLAGS) tcdfio.f90
#
basicfun.o:	basicfun.f90
	$(FC) $(FFLAGS) basicfun.f90
#
tcdfhist.o:	tcdfhist.f90
	$(FC) $(FFLAGS) tcdfhist.f90
#
ariane2tcdf.o:	ariane2tcdf.f90
	$(FC) $(FFLAGS) ariane2tcdf.f90
#
tcdfsplit.o:	tcdfsplit.f90
	$(FC) $(FFLAGS) tcdfsplit.f90
#
tcdfsort.o: 	tcdfsort.f90
	$(FC) $(FFLAGS) tcdfsort.f90
#
tcdfmerge.o:	tcdfmerge.f90
	$(FC) $(FFLAGS) tcdfmerge.f90
#
tcdf_most_likely.o:	tcdf_most_likely.f90
	$(FC) $(FFLAGS) tcdf_most_likely.f90
#
tcdf_flatten_hist.o:	tcdf_flatten_hist.f90
	$(FC) $(FFLAGS) tcdf_flatten_hist.f90
#
tcdf_merge_hist.o:	tcdf_merge_hist.f90
	$(FC) $(FFLAGS) tcdf_merge_hist.f90
#
tcdf_stub.o:	tcdf_stub.f90
	$(FC) $(FFLAGS) tcdf_stub.f90
#
tcdf_get_bot.o:	tcdf_get_bot.f90
	$(FC) $(FFLAGS) tcdf_get_bot.f90
#
#===================================

